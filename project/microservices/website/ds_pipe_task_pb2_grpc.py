# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import website.ds_pipe_task_pb2 as ds__pipe__task__pb2


class RunnerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Run_task = channel.unary_unary(
                '/Runner/Run_task',
                request_serializer=ds__pipe__task__pb2.Task.SerializeToString,
                response_deserializer=ds__pipe__task__pb2.Task_Results.FromString,
                )


class RunnerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Run_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RunnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Run_task': grpc.unary_unary_rpc_method_handler(
                    servicer.Run_task,
                    request_deserializer=ds__pipe__task__pb2.Task.FromString,
                    response_serializer=ds__pipe__task__pb2.Task_Results.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Runner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Runner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Run_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Runner/Run_task',
            ds__pipe__task__pb2.Task.SerializeToString,
            ds__pipe__task__pb2.Task_Results.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Task_EvaluatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Evaluate_Task = channel.unary_unary(
                '/Task_Evaluator/Evaluate_Task',
                request_serializer=ds__pipe__task__pb2.Task.SerializeToString,
                response_deserializer=ds__pipe__task__pb2.Task_Results.FromString,
                )


class Task_EvaluatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Evaluate_Task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Task_EvaluatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Evaluate_Task': grpc.unary_unary_rpc_method_handler(
                    servicer.Evaluate_Task,
                    request_deserializer=ds__pipe__task__pb2.Task.FromString,
                    response_serializer=ds__pipe__task__pb2.Task_Results.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Task_Evaluator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Task_Evaluator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Evaluate_Task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Evaluator/Evaluate_Task',
            ds__pipe__task__pb2.Task.SerializeToString,
            ds__pipe__task__pb2.Task_Results.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
